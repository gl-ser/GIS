//----------------------------------------------------------------------------//
//                  *** ДВИЖОК ГЕОИНФОРМАЦИОННОЙ СИСТЕМЫ ***                  //
//                                                                            //
// Файл ShellGIS.h                                                            //
//                                                                            //
//         *** TSHELLGIS ОБОЛОЧКА ДВИЖКА ГЕОИНФОРМАЦИОННОЙ СИСТЕМЫ ***        //
//                                                                            //
// Автор ГЛУЩЕНКО Сергей                                                      //
//                                                                            //
//                                                                     Москва //
//----------------------------------------------------------------------------//


#ifndef ShellGISH
#define ShellGISH

#include "GISLib.h"


class TShellGIS : public TGISLib
{
  Q_OBJECT

  signals:
    //Обработка события щелчка левой кнопки "мыши" при активированном инструменте TView::ARROW
    // Передает в пользовательскую программу данные, описываемые типом TDataLeftMouse
    void GetDataLeftMouseARROW(TGISLib::TDataLeftMouse Value);

  public:
    TShellGIS(void);
    virtual ~TShellGIS(void);

    //Установить картографическую проекцию
    // Допускаются следующие значения:
    // TGISLib::CYLINDRICAL - Цилиндрическая равнопромежуточная проекция Плате-Карре;
    // TGISLib::NORTHPOLE - Азимутальная ортографическая проекция Северного Полюса;
    // TGISLib::SOUTHPOLE - Азимутальная ортографическая проекция Южного Полюса;
    // TGISLib::MERCATOR - Равноугольная цилиндрическая проекция Меркатора;
    // TGISLib::KAVRAYSKIY - Псевдоцилиндрическая проекция Каврайского
    void SetProjection(TGISLib::TProj Value);

    //Подключить EngineGIS к окну пользовательского интерфейса, на котором будет отображаться карта
    // На вход подаются:
    // - указатель на компоновщик (layout) окна;
    // - указатель на поле строки состояния (status bar) окна для вывода координат указателя "мыши" (эллипсоид ПЗ-90);
    // - указатель на поле строки состояния (status bar) окна для вывода текущего условного масштаба;
    // - указатель на поле строки состояния (status bar) окна для вывода величины измеренного
    //   расстояния (на поверхности эллипсоида ПЗ-90)
    void ConnectWindow(QGridLayout* FLayout, QLabel* FCurCoord, QLabel* FScale, QLabel* FRuler);

    //Отключить EngineGIS от окна пользовательского интерфейса (метод вызвать перед деструктором вышеназванного окна)
    void DisconnectWindow(void);

    //Показать всю карту
    void ShowAllMap(void);

    //Устанавливает (активирует) инструмент по работе с картой
    // Допускаются следующие значения:
    // TView::ARROW - Информация по объектам карты;
    // TView::MOVE - Движение карты (сдвиг и изменение масштаба);
    // TView::RULER - Линейка (вычисление расстояния на поверхности эллипсоида ПЗ-90).
    void SetTool(TView::TTool Value);

    //Возвращает текущий инструмент по работе с картой
    TView::TTool GetTool(void);

    //Устанавливает признаки отображения тех или иных типов картографических данных
    // На вход подаются:
    // - признак отображения рамки карты;
    // - признак отображения 15-градусной сетки
    void WhatIsShow(bool Frame, bool Grid15);

    //Перерисовать картографические данные
    void RePaint(void);

    //Возвращает список слоев с данными
    // На выходе можно получить:
    // - список слоев
    TMapData::TLayerList GetLayerList(void);

    //Найти слой, обратившись к нему по имени
    // На выходе можно получить:
    // - true слой существует;
    // - false такого слоя нет
    bool FindLayer(std::string Name);

    //Показать слой с данными, обратившись к нему по имени
    // На вход подаются:
    // - имя слоя.
    // На выходе можно получить:
    // - true в случае успешного выполнения процедуры;
    // - false в случае какой-либо ошибки
    bool ShowLayer(std::string Name);

    //Скрыть слой с данными, обратившись к нему по имени
    // На вход подаются:
    // - имя слоя.
    // На выходе можно получить:
    // - true в случае успешного выполнения процедуры;
    // - false в случае какой-либо ошибки
    bool HideLayer(std::string Name);

    //Добавить новый слой с данными, задав ему имя
    // На вход подаются:
    // - имя слоя.
    // На выходе можно получить:
    // - true в случае успешного выполнения процедуры;
    // - false в случае какой-либо ошибки
    bool AddLayer(std::string Name);

    //Удалить существующий слой с данными, обратившись к нему по имени
    // На вход подаются:
    // - имя слоя.
    // На выходе можно получить:
    // - true в случае успешного выполнения процедуры;
    // - false в случае какой-либо ошибки
    bool DelLayer(std::string Name);

    //Удаляет все пользовательские слои и перерисовывает карту
    void DelAllUserLayers(void);

    //Добавить новый слой, создав его из MIF-файла формата MapInfo
    // На вход подаются:
    // - имя слоя;
    // - путь и имя MIF-файла.
    // На выходе можно получить:
    // - true в случае успешного выполнения процедуры;
    // - false в случае какой-либо ошибки
    bool AddLayerFromMIF(std::string LayerName, std::string FilePathName);

    //Добавить новый слой, содержащий данные оперативного каталога
    // На выходе можно получить:
    // - true в случае успешного выполнения процедуры;
    // - false в случае какой-либо ошибки
    bool AddLayerOpCat(void);

    //Добавить новый слой, содержащий данные по маршрутам
    // На выходе можно получить:
    // - true в случае успешного выполнения процедуры;
    // - false в случае какой-либо ошибки
    bool AddLayerRoute(void);

    //Добавить новый слой, содержащий данные по трассе полета. Может быть создано несколько слоев с трассами
    // На вход подаются:
    // - номер слоя с трассами;
    // - ширина линии в формате MapInfo;
    // - тип линии в формате MapInfo;
    // - цвет линии в формате MapInfo.
    // На выходе можно получить:
    // - true в случае успешного выполнения процедуры;
    // - false в случае какой-либо ошибки
    bool AddLayerTrass(int Index, int WidthMI, int PatternMI, int ColorMI);

    //Устанавлявает текущий слой с трассой
    // На вход подаются:
    // - номер слоя с трассами
    void SetCurrentTrass(int Index);

    //Удалить текущий слой с трассой
    // На выходе можно получить:
    // - true в случае успешного выполнения процедуры;
    // - false в случае какой-либо ошибки
    bool DelCurrentTrass(void);

    //Добавить новый слой, содержащий данные по полосе обзора. Может быть создано несколько слоев с полосами обзора
    // На вход подаются:
    // - номер слоя с полосами обзора;
    // - ширина линии в формате MapInfo;
    // - тип линии в формате MapInfo;
    // - цвет линии в формате MapInfo.
    // На выходе можно получить:
    // - true в случае успешного выполнения процедуры;
    // - false в случае какой-либо ошибки
    bool AddLayerStrip(int Index, int WidthMI, int PatternMI, int ColorMI);

    //Устанавлявает текущий слой с полосой обзора
    // На вход подаются:
    // - номер слоя с полосами обзора
    void SetCurrentStrip(int Index);

    //Удалить текущий слой с полосой обзора
    // На выходе можно получить:
    // - true в случае успешного выполнения процедуры;
    // - false в случае какой-либо ошибки
    bool DelCurrentStrip(void);

    //Добавить новый слой, содержащий данные по часто перерисовываемым точечным объектам
    // На выходе можно получить:
    // - true в случае успешного выполнения процедуры;
    // - false в случае какой-либо ошибки
    bool AddLayerDynamicPoint(void);

    //Добавить новый слой, содержащий данные по ЗРВ. Может быть создано несколько слоев с ЗРВ
    // На вход подаются:
    // - номер слоя с ЗРВ;
    // - ширина линии в формате MapInfo;
    // - тип линии в формате MapInfo;
    // - цвет линии в формате MapInfo.
    // На выходе можно получить:
    // - true в случае успешного выполнения процедуры;
    // - false в случае какой-либо ошибки
    bool AddLayerZRV(int Index, int WidthMI, int PatternMI, int ColorMI);

    //Устанавлявает текущий слой с ЗРВ
    // На вход подаются:
    // - номер слоя с трассами
    void SetCurrentZRV(int Index);

    //Удалить текущий слой с ЗРВ
    // На выходе можно получить:
    // - true в случае успешного выполнения процедуры;
    // - false в случае какой-либо ошибки
    bool DelCurrentZRV(void);

    //Возвращает минимальное свободное значение идентификатора для размещения нового объекта в слое
    // Обращается к слою по имени
    // На выходе можно получить:
    // - свободное значение идентификатора объекта
    unsigned int GetFreeID(std::string Name);

    //Возвращает список заголовков объектов в существующем слое. Обращается к слою по имени
    // На вход подаются:
    // - имя слоя.
    // На выходе можно получить:
    // - список заголовков объектов в указанном слое
    TLayer::THeadersObjects GetObjList(std::string Name);

    //Добавляет в слой оперативного каталога точечный объект наблюдения.
    // !!! Добавление объекта в слой не вызывает перерисовку слоя. Следует пользоваться методом RePaint !!!
    // На вход подаются:
    // - идентификатор объекта;
    // - описание объекта;
    // - признак волевого объекта;
    // - геодезические координаты объекта "точка" на эллипсоиде ПЗ-90 [рад].
    // На выходе можно получить:
    // - true в случае успешного выполнения процедуры;
    // - false в случае какой-либо ошибки
    bool AddPointInOpCat(unsigned int ID, std::string Comment, bool Volition, TMultitude::TOnePoint Point);

    //Добавляет в слой оперативного каталога площадной объект наблюдения.
    // !!! Добавление объекта в слой не вызывает перерисовку слоя. Следует пользоваться методом RePaint !!!
    // На вход подаются:
    // - идентификатор объекта;
    // - описание объекта;
    // - признак волевого объекта;
    // - геодезические координаты узловых точек площадного объекта на эллипсоиде ПЗ-90 [рад].
    // На выходе можно получить:
    // - true в случае успешного выполнения процедуры;
    // - false в случае какой-либо ошибки
    bool AddAreaInOpCat(unsigned int ID, std::string Comment, bool Volition, TMultitude::TSpot Spot);

    //Добавляет в слой, содержащий данные по маршрутам, новый маршрут.
    // !!! Добавление маршрута в слой не вызывает перерисовку слоя. Следует пользоваться методом RePaint !!!
    // На вход подаются:
    // - идентификатор маршрута;
    // - описание маршрута;
    // - геодезические координаты узловых абриса маршрута на эллипсоиде ПЗ-90 [рад].
    // На выходе можно получить:
    // - true в случае успешного выполнения процедуры;
    // - false в случае какой-либо ошибки
    bool AddInRoute(unsigned int ID, std::string Comment, TMultitude::TSpot Spot);

    //Добавляет в текущий слой с трассами новый участок.
    // !!! Добавление участка трассы в слой не вызывает перерисовку слоя. Следует пользоваться методом RePaint !!!
    // На вход подаются:
    // - идентификатор участка трассы;
    // - описание участка трассы;
    // - геодезические координаты участка трассы (узлы линии или полилинии) на эллипсоиде ПЗ-90 [рад].
    // На выходе можно получить:
    // - true в случае успешного выполнения процедуры;
    // - false в случае какой-либо ошибки
    bool AddInCurrentTrass(unsigned int ID, std::string Comment, TMultitude::TSpot Spot);

    //Добавляет в текущий слой с полосами обзора новый участок.
    // !!! Добавление участка полосы обзора в слой не вызывает перерисовку слоя. Следует пользоваться методом RePaint !!!
    // На вход подаются:
    // - идентификатор участка полосы обзора;
    // - описание участка полосы обзора;
    // - геодезические координаты участка полосы обзора (узлы линии или полилинии) на эллипсоиде ПЗ-90 [рад].
    // На выходе можно получить:
    // - true в случае успешного выполнения процедуры;
    // - false в случае какой-либо ошибки
    bool AddInCurrentStrip(unsigned int ID, std::string Comment, TMultitude::TSpot Spot);

    //Добавляет в слой с динамическими точками новый объект.
    // !!! Добавление объекта в слой не вызывает перерисовку слоя. Следует пользоваться методом RePaint !!!
    // На вход подаются:
    // - идентификатор объекта;
    // - описание объекта;
    // - геодезические координаты объекта "точка" на эллипсоиде ПЗ-90 [рад];
    // - код цвета MapInfo.
    // На выходе можно получить:
    // - true в случае успешного выполнения процедуры;
    // - false в случае какой-либо ошибки
    bool AddInDynamicPoint(unsigned int ID, std::string Comment, TMultitude::TOnePoint Point, int ColorMI);

    //Быстро сдвигает объект в слое с динамическими точками
    // На вход подаются:
    // - идентификатор объекта;
    // - описание объекта;
    // - геодезические координаты объекта "точка" на эллипсоиде ПЗ-90 [рад]
    void MoveInDynamicPoint(unsigned int ID, std::string Comment, TMultitude::TOnePoint Point);

    //Добавляет в текущий слой с ЗРВ новый участок
    // !!! Добавление участка ЗРВ в слой не вызывает перерисовку слоя. Следует пользоваться методом RePaint !!!
    // На вход подаются:
    // - идентификатор участка ЗРВ;
    // - описание участка ЗРВ;
    // - геодезические координаты участка ЗРВ (узлы линии или полилинии) на эллипсоиде ПЗ-90 [рад].
    // На выходе можно получить:
    // - true в случае успешного выполнения процедуры;
    // - false в случае какой-либо ошибки
    bool AddInCurrentZRV(unsigned int ID, std::string Comment, TMultitude::TSpot Spot);

    //Добавляет в существующий слой объект типа "точка". Обращается к слою по имени
    // !!! Добавление объекта в слой не вызывает перерисовку слоя. Следует пользоваться методом RePaint !!!
    // На вход подаются:
    // - имя слоя;
    // - идентификатор объекта;
    // - наименование объекта;
    // - тип символа, изображающего объект "точка";
    // - геодезические координаты объекта "точка" на эллипсоиде ПЗ-90 [рад];
    // - перо для рисования объекта "точка";
    // - заливка для рисования объекта "точка".
    // На выходе можно получить:
    // - true в случае успешного выполнения процедуры;
    // - false в случае какой-либо ошибки
    bool AddPointInLayer(std::string Name, unsigned int ID, std::string ObjName, TLayer::TTypeSymbol Type,
                         TMultitude::TOnePoint Point, QPen Pen, QBrush Brush);

    //Добавляет в существующий слой объект типа "полилиния". Обращается к слою по имени
    // !!! Добавление объекта в слой не вызывает перерисовку слоя. Следует пользоваться методом RePaint !!!
    // На вход подаются:
    // - имя слоя;
    // - идентификатор объекта;
    // - наименование объекта;
    // - геодезические координаты узловых точек полилинии на эллипсоиде ПЗ-90 [рад];
    // - перо для рисования объекта "полилиния".
    // На выходе можно получить:
    // - true в случае успешного выполнения процедуры;
    // - false в случае какой-либо ошибки
    bool AddPolyLineInLayer(std::string Name, unsigned int ID, std::string ObjName, TMultitude::TSpot Spot, QPen Pen);

    //Добавляет в существующий слой объект типа "регион". Обращается к слою по имени
    // !!! Добавление объекта в слой не вызывает перерисовку слоя. Следует пользоваться методом RePaint !!!
    // На вход подаются:
    // - имя слоя;
    // - идентификатор объекта;
    // - наименование объекта;
    // - геодезические координаты узловых точек региона на эллипсоиде ПЗ-90 [рад];
    // - перо для рисования объекта "регион";
    // - заливка для рисования объекта "регион".
    // На выходе можно получить:
    // - true в случае успешного выполнения процедуры;
    // - false в случае какой-либо ошибки
    bool AddRegionInLayer(std::string Name, unsigned int ID, std::string ObjName, TMultitude::TSpot Spot, QPen Pen, QBrush Brush);

    //Удаляет объект любого типа из существующего слоя. Обращается к слою по имени
    // На вход подаются:
    // - имя слоя;
    // - идентификатор объекта.
    // На выходе можно получить:
    // - true в случае успешного выполнения процедуры;
    // - false в случае какой-либо ошибки
    bool DelObjFromLayer(std::string Name, unsigned int ID);
};


#endif
